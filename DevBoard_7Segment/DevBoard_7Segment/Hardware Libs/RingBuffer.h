/* Generated by CodeDescriptor 1.3.0.0714 */
/*
* Project Name      -> RingPuffer
* Version           -> 1.0.0.0810
* Author            -> Jan Homann
* Build Date        -> 17.12.2018 12:54:39
* Description       -> 
*
*	Ringspeicher nach dem LIFO (Last in, First out) Prinzip
*	Die größe des eigentlichen Speichers muss das vielfache von 2 entsprechen.
*
*	Beispiel: 
*	
*	Hier wird ein Speicherplatz für 128 [0..127] Elemente reserviert.
*
*	uint8_t Puffer[128] = ""; // Speicher für den Ringpuffer reservieren
*	volatile RingBuffer_t RingBuffer;
*	RingBufferInit(&RingBuffer,(uint8_t*)Puffer,sizeof(Puffer));
*
*
*/

#ifndef __RINGBUFFER_H__
#define __RINGBUFFER_H__

#include <stdint.h>
#include <stdlib.h>

typedef struct
{
	uint8_t *BufferPtr;
	uint8_t BufferSize;
	
	uint8_t NewestIndex;
	uint8_t OldestIndex;
	
	uint8_t Entrys;
}RingBuffer_t;

enum RingBufferStatus {BUFFER_OK, BUFFER_EMPTY, BUFFER_FULL};

typedef struct
{
	uint8_t *DataPtr;
	enum RingBufferStatus Status;
}Burst_Info_t;



/* RingBufferInit
* @para             -> - Pointer of RingBuffer Struct , External Buffer for RingBuffer , Size of external Buffer
* @return           -> -none
* @description      -> Initalize RingBuffer Struct
*/
void RingBufferInit( RingBuffer_t *RingBuff , void *Buff , uint16_t BufferSize );

/* RingBufferClear
* @para             -> - Pointer of RingBuffer Struct
* @return           -> -none
* @description      -> Destroy the complete RingBuffer
*/
void RingBufferClear( RingBuffer_t *RingBuff );

/* RingBufferLength
* @para             -> - Pointer of RingBuffer Struct
* @return           -> - Size of Members in the external Buffer
* @description      -> Count Members of external Buffer
*/
size_t RingBufferLength( RingBuffer_t *RingBuff );

/* RingBufferWrite
* @para             -> - Pointer of volatile RingBuffer Struct , Byte to put into external Buffer
* @return           -> - State of RingBuffer
* @description      -> Write Byte into external Buffer
*/
enum RingBufferStatus RingBufferWrite( volatile RingBuffer_t *RingBuff , uint8_t Byte );

/* RingBufferRead
* @para             -> - Pointer of volatile RingBuffer Struct , Pointer to free data space
* @return           -> - State of RingBuffer
* @description      -> Read byte and write to free space and increment the internal "OldestIndex" Counter
*/
enum RingBufferStatus RingBufferRead( volatile RingBuffer_t *RingBuff , uint8_t *Byte );

/* RingBufferPeek
* @para             -> - Pointer of volatile RingBuffer Struct , Pointer to free data space
* @return           -> - State of RingBuffer
* @description      -> Read byte and write to free space without increment "OldestIndex" Counter
*/
enum RingBufferStatus RingBufferPeek( volatile RingBuffer_t *RingBuff , uint8_t *Byte );

/* RingBufferReadByte
* @para             -> - Pointer of volatile RingBuffer Struct
* @return           -> - State of RingBuffer + Readed Byte
* @description      -> Read byte and give back with increment "OldestIndex" Counter
*/
uint16_t RingBufferReadByte( volatile RingBuffer_t *RingBuff );

/* RingBufferReadBurst
* @para             -> - Pointer of volatile RingBuffer Struct , Length of Data
* @return           -> - State of RingBuffer + Pointer of readed Byte
* @description      -> Read byte and give back with increment "OldestIndex" Counter
*/
Burst_Info_t RingBufferReadBurst(volatile RingBuffer_t *RingBuff , uint16_t Length );

/* RingBufferWriteBurst
* @para             -> - Pointer of volatile RingBuffer Struct , Source of Data , Length of Data
* @return           -> - State of RingBuffer
* @description      -> Write Bytes to external Buffer
*/
enum RingBufferStatus RingBufferWriteBurst(volatile RingBuffer_t *RingBuff , uint8_t *Source , uint16_t Length );



#endif // __RINGBUFFER_H__